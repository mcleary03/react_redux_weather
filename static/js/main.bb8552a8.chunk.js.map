{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/weatherReducer.js","components/Button/index.js","containers/SearchBar/index.js","components/Chart/index.js","components/Map/index.js","containers/WeatherDisplay/index.js","App.js","serviceWorker.js","index.js"],"names":["fetchWeather","city","url","concat","type","payload","axios","get","rootReducer","combineReducers","weather","state","arguments","length","undefined","action","status","data","Object","toConsumableArray","Button","props","children","react_default","a","createElement","className","SearchBar","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","term","handleSubmit","bind","assertThisInitialized","updateTerm","e","preventDefault","setState","target","value","input","focus","_this2","onSubmit","ref","onChange","placeholder","components_Button","Component","connect","dispatch","bindActionCreators","Chart","_ref","units","color","min","Math","round","apply","max","build","style","avg","reduce","sum","n","average","Map","window","google","maps","refs","map","zoom","center","lat","lng","lon","WeatherDisplay","cityData","list","_cityData$city","name","_cityData$city$coord","coord","temp","tempKelvin","main","humidity","pressure","key","components_Map","components_Chart","renderWeather","App","containers_SearchBar","containers_WeatherDisplay","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","es","store","reducers","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bb8552a8.chunk.js","sourcesContent":["import axios from 'axios'\n\n// openweather.org api key\nconst API_KEY = '87b346f0630aa62690df7e45c57d1b86'\nconst BASE_URL = `https://api.openweathermap.org/data/2.5/forecast?q=`\n\nexport const FETCH_WEATHER = 'FETCH_WEATHER'\n\nexport const fetchWeather = city => {\n  const url = `${BASE_URL}${city},us&appid=${API_KEY}`\n  const request = axios.get(url)\n\n  return {\n    type: FETCH_WEATHER,\n    payload: request\n  }\n}","import { combineReducers } from 'redux'\nimport weatherReducer from './weatherReducer'\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer\n})\n\nexport default rootReducer","import { FETCH_WEATHER } from '../actions'\n\nexport default (state=[], action) => {\n\n  switch (action.type) {\n    case FETCH_WEATHER:\n      return action.payload.status===200 ? [ action.payload.data, ...state ] : state\n    default:\n      return state\n  }\n}","import React from 'react'\nimport './styles.css'\n\nconst Button = props => {\n  const { children, type } = props\n\n  return (\n    <button className='Button' type={ type }>{ children }</button>\n  )\n}\n\nexport default Button","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchWeather } from '../../actions'\n\nimport Button from '../../components/Button'\nimport './styles.css'\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      term: ''\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.updateTerm = this.updateTerm.bind(this)\n  }\n\n  handleSubmit(e) {\n    e.preventDefault()\n    this.props.fetchWeather(this.state.term)\n    this.setState({ term: '' })\n  }\n\n  updateTerm(e) {\n    this.setState({ term: e.target.value })\n  }\n\n  componentDidMount() {\n    this.input.focus()\n  }\n\n  render() {\n    return (\n      <header className='header'>\n\n        <h1 className='heading'>\n          { this.props.children }\n        </h1>\n\n        <form className='searchForm' onSubmit={ this.handleSubmit }>\n          <input className='input'\n            ref={ input => this.input = input }\n            value={ this.state.term } \n            onChange={ this.updateTerm }\n            placeholder='enter city or zip'\n          />\n          <Button type='submit'>search</Button>\n        </form>\n\n      </header>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => (\n  bindActionCreators({ fetchWeather }, dispatch)\n)\n\n\nexport default connect(null, mapDispatchToProps)(SearchBar)","import React from 'react'\nimport { Sparklines, SparklinesLine, SparklinesReferenceLine } from 'react-sparklines'\nimport './styles.css'\n\nconst Chart = ({ data, units, color }) => {\n  const min = Math.round(Math.min(...data))\n  const max = Math.round(Math.max(...data))\n  const average = data => {\n    const avg = data.reduce( (sum, n) => sum+n, 0) / data.length\n    return Math.round(avg * 100) / 100\n  }\n\n  return (\n    <div className='chart'>\n      <span className='min'>{ min }</span>\n      <span className='max'>{ max }</span>\n      <Sparklines data={ data }>\n        <SparklinesLine color={ color } />\n        <SparklinesReferenceLine type='avg' />\n      </Sparklines>\n      <label>Average: </label><div style={{ color }}>{ average(data) } { units }</div>\n    </div>\n  )\n}\n\nexport default Chart","import React, { Component } from 'react'\n\nclass Map extends Component {\n\n  componentDidMount() {\n    const google = window.google\n    \n    new google.maps.Map(this.refs.map, {\n      zoom: 10,\n      center: {\n        lat: this.props.lat,\n        lng: this.props.lon\n      }\n    })\n  }\n\n  render() {\n    return <div ref='map' />\n  }\n}\n\nexport default Map","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Chart from '../../components/Chart'\nimport Map from '../../components/Map'\nimport './styles.css'\n\nclass WeatherDisplay extends Component {\n\n  renderWeather(cityData) {\n    const { list, city: { name, coord: { lat, lon } } } = cityData\n    const formatFahrenheit = tempKelvin => Math.round((tempKelvin * (9/5) - 459.67)*100)/100\n\n    const temp = list.map( weather => formatFahrenheit(weather.main.temp) )\n    \n    const humidity = list.map( weather => weather.main.humidity )\n    \n    const pressure = list.map( weather => weather.main.pressure )\n\n    return (\n      <tr key={ name }>\n        <td><Map className='city' lat={ lat } lon={ lon }/></td>\n        <td><Chart data={ temp } units='°F' color='red'/></td>\n        <td><Chart data={ pressure } units='hPa' color='green'/></td>\n        <td><Chart data={ humidity } units='%' color='blue'/></td>\n      </tr>\n    )\n  }\n\n  render() {\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>City</th>\n            <th>Temperature (°F)</th>\n            <th>Pressure (hPa)</th>\n            <th>Humidity (%)</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.weather.map(this.renderWeather)}\n        </tbody>\n      </table>\n    )\n  }\n}\n\nconst mapStateToProps = ({ weather }) => ({ weather })\n\nexport default connect(mapStateToProps)(WeatherDisplay)","import React, { Component } from 'react'\nimport './App.css'\nimport SearchBar from './containers/SearchBar'\nimport WeatherDisplay from './containers/WeatherDisplay'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchBar>5 Day Weather</SearchBar>\n        <WeatherDisplay />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport ReduxPromise from 'redux-promise'\n\nimport reducers from './reducers'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore)\n\nReactDOM.render(\n  <Provider store={ createStoreWithMiddleware(reducers) }>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n)\n\nserviceWorker.register()"],"sourceRoot":""}